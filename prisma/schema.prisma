// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 유저
model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  name         String?
  nickname     String  @unique
  password     String  @db.VarChar(255)
  refreshToken String? @db.Text()

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @default(now()) @updatedAt()
  deletedAt DateTime? @db.Timestamptz()

  posts             Post[]
  comments          Comment[]
  recomments        Recomment[]
  postLikeJoin      PostLikeJoin[]
  commentLikeJoin   CommentLikeJoin[]
  recommentLikeJoin RecommentLikeJoin[]
}

// 게시글
model Post {
  id      Int    @id @default(autoincrement())
  title   String
  content String
  like    Int    @default(0)
  view    Int    @default(0)

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @default(now()) @updatedAt()
  deletedAt DateTime? @db.Timestamptz()

  comments     Comment[]
  // tags         Tag[]
  authorId     Int
  postTagJoin  PostTagJoin[]
  postLikeJoin PostLikeJoin[]

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model PostLikeJoin {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now()) @db.Timestamptz()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Tag {
  id   Int    @id @default(autoincrement())
  text String @unique @db.VarChar(32)

  createdAt DateTime @default(now()) @db.Timestamptz()

  postId      Int
  postTagJoin PostTagJoin[]

  // post Post @relation(fields: [postId], references: [id])
}

// 중간 가상 조인 테이블
model PostTagJoin {
  // id        Int      @id @default(autoincrement())
  postId Int
  tagId  Int
  // createdAt DateTime @default(now()) @db.Timestamptz()
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String
  thank   Int    @default(0)
  like    Int    @default(0)

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime? @db.Timestamptz()

  userId          Int
  postId          Int
  recomments      Recomment[]
  commentLikeJoin CommentLikeJoin[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model CommentLikeJoin {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now()) @db.Timestamptz()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model Recomment {
  id      Int    @id @default(autoincrement())
  content String
  // 추후 삭제
  thank   Int    @default(0)
  like    Int    @default(0)

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime? @db.Timestamptz()

  userId            Int
  commentId         Int
  recommentLikeJoin RecommentLikeJoin[]

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model RecommentLikeJoin {
  id          Int       @id @default(autoincrement())
  userId      Int
  recommentId Int
  createdAt   DateTime  @default(now()) @db.Timestamptz()
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  recomment   Recomment @relation(fields: [recommentId], references: [id], onDelete: Cascade)

  @@unique([userId, recommentId])
}
